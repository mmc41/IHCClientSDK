
using System;
using System.Collections.Generic;
using System.Text;
using Microsoft.Extensions.Configuration;

namespace Ihc.IOExtractor {
    /**
    * Common base class for generators.
    */
    public abstract class GeneratorBase {
        protected readonly string header = "Generated by IHC Project Extractor";
        protected readonly IConfiguration config;
        protected readonly IDictionary<string, string> idStringReplacements;

        public GeneratorBase(IConfiguration appConfig) {
            this.config = appConfig;
            this.idStringReplacements = GetReplacementStrings(config);
        }

        protected string GetIdentifierName(IOMeta meta) {
            StringBuilder sb = new StringBuilder();

            var source = meta.GroupName +"_"+ meta.ProductPosition + "_" + meta.ProductName+"_"+meta.DatalineName;

            foreach(var r in idStringReplacements) {
                source = source.Replace(r.Key, r.Value);
            }

            bool reqUpper = true; // pascalcase
            bool first = true;
            foreach(var c in source) {
                if (!Char.IsLetter(c) && first) {
                    sb.Append("_");
                } 
                
                if (Char.IsNumber(c) || c == '_') {
                    sb.Append(c);
                } else if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')){
                    if (reqUpper) {
                        sb.Append(Char.ToUpper(c));
                    } else {
                        sb.Append(c);
                    }
                    reqUpper = false;
                } else if (Char.IsSeparator(c)) {
                    // sb.Append("_");
                    reqUpper = true;
                } else {
                    // Do nothing
                }

                first = false;
            }

            return sb.ToString();
        }

        protected static IDictionary<string, string> GetReplacementStrings(IConfiguration config)
        {
            Dictionary<string, string> result = new Dictionary<string, string>();
            DoAddReplacements(config, "identifiers:stringReplacements", result);
            DoAddReplacements(config, "identifiers:stringReplacements2", result);
            return result;
        }

        private static void DoAddReplacements(IConfiguration config, string key, Dictionary<string, string> result)
        {
            var section = config.GetSection(key);
            var children = section.GetChildren();
            foreach (var child in children)
            {
                result.Add(child.Key, child.Value);
            }
        }

        /**
        * Generates output for a IHC project.
        * Must be implemented by all concrete generators.
        */
        public abstract String Generate(IhcProjectLoader project);

        /**
        * Returns file extension to use.
        */
        public abstract String FileExtension();
    };

    /**
    * Generator for json (outputs everything for diagnostics)
    */
    public class JsonGenerator : GeneratorBase {
        public JsonGenerator(IConfiguration config) : base(config) {
            var section = config.GetSection("JsonGenerator");
        }

        public override String Generate(IhcProjectLoader project)
        {
            var inputs = project.GetIO(IOType.Input);
            var outputs = project.GetIO(IOType.Output);

            StringBuilder buf = new StringBuilder();

            buf.Append("{" + Environment.NewLine);
            buf.AppendFormat(" \"comment\": \"{0}\"," + Environment.NewLine, header);

            buf.Append(" \"Inputs\": [" + Environment.NewLine);
            GenerateIoList(inputs, buf);
            buf.Append(" ]," + Environment.NewLine);

            buf.Append(" \"Outputs\": [" + Environment.NewLine);
            GenerateIoList(outputs, buf);
            buf.Append(" ]");
            buf.Append("}" + Environment.NewLine);

            return buf.ToString();
        }

        private void GenerateIoList(IOMeta[] ioAry, StringBuilder buf)
        {
            for (int i = 0; i < ioAry.Length; ++i)
            {
                var io = ioAry[i];
                buf.Append("  {");
                buf.AppendFormat("\" GroupId\" : {0}, ", io.GroupId);
                buf.AppendFormat("\"ResourceId\" : {0}, ", io.ResourceId);
                buf.AppendFormat("\"ProductId\" : {0}, ", io.ProductId);
                buf.AppendFormat("\"GroupName\" : \"{0}\", ", io.GroupName.Replace("\"", "\\\""));
                buf.AppendFormat("\"DatalineName\" : \"{0}\", ", io.DatalineName.Replace("\"", "\\\""));
                buf.AppendFormat("\"ProductName\" : \"{0}\", ", io.ProductName.Replace("\"", "\\\""));
                buf.AppendFormat("\"ProductPosition\" : \"{0}\", ", io.ProductPosition.Replace("\"", "\\\""));
                buf.AppendFormat("\"ProductNote\" : \"{0}\", ", io.ProductNote.Replace("\"", "\\\""));
                buf.AppendFormat("\"DatalineNameNote\" : \"{0}\", ", io.DatalineNote.Replace("\"", "\\\""));
                buf.AppendFormat("\"IdentifierName\" : \"{0}\" ", GetIdentifierName(io));
                buf.Append(" }");
                if (i < ioAry.Length - 1)
                {
                    buf.Append(",");
                }
                buf.Append(Environment.NewLine);
            }
        }

        public override String FileExtension() {
            return "json";
        }
    };

    /**
    * C# generator for input/output constants.
    */
    public class CSharpGenerator : GeneratorBase {
        private readonly string ns;

        public CSharpGenerator(IConfiguration config) : base(config) {
            var section = config.GetSection("CSharpGenerator");
            ns = section["namespace"];
        }

        public override String Generate(IhcProjectLoader project)
        {
            var inputs = project.GetIO(IOType.Input);
            var outputs = project.GetIO(IOType.Output);

            StringBuilder buf = new StringBuilder();

            buf.AppendFormat("// {0}" + Environment.NewLine, header);

            buf.Append("namespace " + ns + " {" + Environment.NewLine);
            
            GenerateIoList(inputs, "Inputs", buf);
            GenerateIoList(outputs, "Outputs", buf);

            buf.Append("}" + Environment.NewLine);

            return buf.ToString();
        }

        private void GenerateIoList(IOMeta[] ioAry, string className, StringBuilder buf)
        {
            buf.Append("  public sealed class " + className + " { " + Environment.NewLine);

            foreach (var io in ioAry)
            {
                buf.AppendFormat("    public const int {0} = 0x{1};" + Environment.NewLine, GetIdentifierName(io), io.ResourceId.ToString("X8"));
            }

            buf.Append("  }" + Environment.NewLine);
        }

        public override String FileExtension() {
            return "cs";
        }
    };

    /**
    * Javascript generator for input/output constants.
    */
    public class JSGenerator : GeneratorBase {
        public JSGenerator(IConfiguration config) : base(config) {
            var section = config.GetSection("JSGenerator");
        }

        public override String Generate(IhcProjectLoader project)
        {
            var inputs = project.GetIO(IOType.Input);
            var outputs = project.GetIO(IOType.Output);

            StringBuilder buf = new StringBuilder();

            buf.AppendFormat("// {0}" + Environment.NewLine, header);
       
            GenerateIoList(inputs, "Inputs", buf);
            GenerateIoList(outputs, "Outputs", buf);

            return buf.ToString();
        }

        private void GenerateIoList(IOMeta[] ioAry, string objectName, StringBuilder buf)
        {
            buf.Append(" export const " + objectName + " = { " + Environment.NewLine);

            for (int i = 0; i < ioAry.Length; ++i)
            {
                var io = ioAry[i];
                buf.AppendFormat("    {0} : 0x{1}", GetIdentifierName(io), io.ResourceId.ToString("X8"));
                if (i < ioAry.Length - 1)
                {
                    buf.Append(",");
                }
                buf.Append(Environment.NewLine);
            }

            buf.Append(" };" + Environment.NewLine + Environment.NewLine);
        }

        public override String FileExtension() {
            return "js";
        }
    };

    /**
    * Typescript generator for input/output constants.
    */
    public class TSGenerator : GeneratorBase {
        public TSGenerator(IConfiguration config) : base(config) {
            var section = config.GetSection("TSGenerator");
        }

        public override String Generate(IhcProjectLoader project)
        {
            var inputs = project.GetIO(IOType.Input);
            var outputs = project.GetIO(IOType.Output);

            StringBuilder buf = new StringBuilder();

            buf.AppendFormat("// {0}" + Environment.NewLine, header);
       
            GenerateIoList(inputs, "Inputs", buf);
            GenerateIoList(outputs, "Outputs", buf);

            return buf.ToString();
        }

        private void GenerateIoList(IOMeta[] ioAry, string objectName, StringBuilder buf)
        {
            buf.Append(" export const enum " + objectName + " { " + Environment.NewLine);

            for (int i = 0; i < ioAry.Length; ++i)
            {
                var io = ioAry[i];
                buf.AppendFormat("    {0} = 0x{1}", GetIdentifierName(io), io.ResourceId.ToString("X8"));
                if (i < ioAry.Length - 1)
                {
                    buf.Append(",");
                }
                buf.Append(Environment.NewLine);
            }

            buf.Append(" };" + Environment.NewLine + Environment.NewLine);
        }

        public override String FileExtension() {
            return "ts";
        }
    };
}